### Test case
[[tests]]
sql = """
insert into proj.dat.out_table
select * except (c)
from proj.dat.in_table
"""
[[tests.schema_objects]]
name = "proj.dat.in_table"
kind = "table"
columns = [
    { name = "a", dtype = "STRING" },
    { name = "b", dtype = "STRING" },
    { name = "c", dtype = "STRING" },
]
[[tests.schema_objects]]
name = "proj.dat.out_table"
kind = "table"
columns = [{ name = "a", dtype = "STRING" }, { name = "b", dtype = "STRING" }]
[tests.ready_lineage."proj.dat.out_table"]
a = ["proj.dat.in_table->a"]
b = ["proj.dat.in_table->b"]

### Test case
[[tests]]
sql = """
insert into proj.dat.out_table
select *
from proj.dat.in_table
"""
[[tests.schema_objects]]
name = "proj.dat.in_table"
kind = "table"
columns = [
    { name = "a", dtype = "STRING" },
    { name = "b", dtype = "STRING" },
    { name = "c", dtype = "STRING" },
]
[[tests.schema_objects]]
name = "proj.dat.out_table"
kind = "table"
columns = [
    { name = "a", dtype = "STRING" },
    { name = "b", dtype = "STRING" },
    { name = "c", dtype = "STRING" },
]
[tests.ready_lineage."proj.dat.out_table"]
a = ["proj.dat.in_table->a"]
b = ["proj.dat.in_table->b"]
c = ["proj.dat.in_table->c"]

### Test case
[[tests]]
sql = """
insert into `proj.dat.out_table`
with tmp as (
    select * except (c)
    from proj.dat.t1
),
tmp2 as (
    select a, b, `c`
    from proj.dat.t2
)
select
    *
from tmp inner join tmp2 using (a,b)
"""
[[tests.schema_objects]]
name = "proj.dat.t1"
kind = "table"
columns = [
    { name = "a", dtype = "STRING" },
    { name = "b", dtype = "STRING" },
    { name = "c", dtype = "STRING" },
]
[[tests.schema_objects]]
name = "proj.dat.t2"
kind = "table"
columns = [
    { name = "a", dtype = "STRING" },
    { name = "b", dtype = "STRING" },
    { name = "c", dtype = "STRING" },
]
[[tests.schema_objects]]
name = "proj.dat.out_table"
kind = "table"
columns = [
    { name = "a", dtype = "STRING" },
    { name = "b", dtype = "STRING" },
    { name = "c", dtype = "STRING" },
]
[tests.ready_lineage."proj.dat.out_table"]
a = ["proj.dat.t1->a", "proj.dat.t2->a"]
b = ["proj.dat.t1->b", "proj.dat.t2->b"]
c = ["proj.dat.t2->c"]

### Test case
[[tests]]
sql = """
create temp table temp_table as (
    select
        *
    from proj.dat.t1
);
merge into proj.dat.out_table as t
using (
    select * from temp_table
)
on false
when not matched then
    insert row
when not matched by source then
    delete
"""
[[tests.schema_objects]]
name = "proj.dat.t1"
kind = "table"
columns = [
    { name = "a", dtype = "STRING" },
    { name = "b", dtype = "STRING" },
    { name = "c", dtype = "STRING" },
]
[[tests.schema_objects]]
name = "proj.dat.t2"
kind = "table"
columns = [
    { name = "a", dtype = "STRING" },
    { name = "b", dtype = "STRING" },
    { name = "c", dtype = "STRING" },
]
[[tests.schema_objects]]
name = "proj.dat.out_table"
kind = "table"
columns = [
    { name = "a", dtype = "STRING" },
    { name = "b", dtype = "STRING" },
    { name = "c", dtype = "STRING" },
]
[tests.ready_lineage."proj.dat.out_table"]
a = ["proj.dat.t1->a"]
b = ["proj.dat.t1->b"]
c = ["proj.dat.t1->c"]

### Test case
[[tests]]
sql = """
delete from dataset.Inventory T
where T.product = "foo"
"""
[[tests.schema_objects]]
name = "dataset.Inventory"
kind = "table"
columns = [
    { name = "product", dtype = "STRING" },
    { name = "quantity", dtype = "INT64" },
    { name = "last_updated", dtype = "TIMESTAMP" },
]
[tests.ready_lineage]
# Empty

### Test case
[[tests]]
sql = """
truncate table dataset.Inventory;
"""
[[tests.schema_objects]]
name = "dataset.Inventory"
kind = "table"
columns = [
    { name = "product", dtype = "STRING" },
    { name = "quantity", dtype = "INT64" },
    { name = "last_updated", dtype = "TIMESTAMP" },
]
[tests.ready_lineage]
# Empty

### Test case
[[tests]]
sql = """
MERGE dataset.Inventory T
USING dataset.NewArrivals S
ON T.product = S.product
WHEN MATCHED THEN
  UPDATE SET quantity = T.quantity + S.quantity
"""
[[tests.schema_objects]]
name = "dataset.Inventory"
kind = "table"
columns = [
    { name = "product", dtype = "STRING" },
    { name = "quantity", dtype = "INT64" },
    { name = "last_updated", dtype = "TIMESTAMP" },
]
[[tests.schema_objects]]
name = "dataset.NewArrivals"
kind = "table"
columns = [
    { name = "product", dtype = "STRING" },
    { name = "quantity", dtype = "INT64" },
    { name = "arrival_date", dtype = "DATE" },
]
[tests.ready_lineage."dataset.Inventory"]
quantity = ["dataset.Inventory->quantity", "dataset.NewArrivals->quantity"]

### Test case
[[tests]]
sql = """
merge proj.dataset.out_table
using (
select
    f0 + f3.a[0].x,
    f1.*,
    f2.a.x
from
    proj.dataset.in_table
)
on false
when not matched by target then
    insert row
when not matched by source then
    delete
"""
[[tests.schema_objects]]
name = "proj.dataset.in_table"
kind = "table"
columns = [
    {"name" = "f0", "dtype" = "int64"},
    {"name" = "f1", "dtype" = "struct<a int64, b array<int64>>"},
    {"name" = "f2", "dtype" = "struct<a struct<x int64, y array<int64>>>"},
    {"name" = "f3", "dtype" = "struct<a array<struct<x int64>>>"}
]
[[tests.schema_objects]]
name = "proj.dataset.out_table"
kind = "table"
columns = [
    {"name" = "o1", "dtype" = "int64"},
    {"name" = "o2", "dtype" = "int64"},
    {"name" = "o3", "dtype" = "array<int64>"},
    {"name" = "o4", "dtype" = "int64"}
]
[tests.ready_lineage."proj.dataset.out_table"]
o1 = ["proj.dataset.in_table->f0", "proj.dataset.in_table->f3.a[].x"]
o2 = ["proj.dataset.in_table->f1.a"]
o3 = ["proj.dataset.in_table->f1.b"]
o4 = ["proj.dataset.in_table->f2.a.x"]

### Test case
[[tests]]
sql = """
INSERT INTO proj.dataset.output_table
SELECT
  arr_table.id,
  items
FROM
  proj.dataset.array_table AS arr_table,
  UNNEST(arr_table.array_column) AS items
"""
[[tests.schema_objects]]
name = "proj.dataset.array_table"
kind = "table"
columns = [
    { name = "id", dtype = "INT64" },
    { name = "array_column", dtype = "ARRAY<STRING>" }
]
[[tests.schema_objects]]
name = "proj.dataset.output_table"
kind = "table"
columns = [
    { name = "id", dtype = "INT64" },
    { name = "item_value", dtype = "STRING" }
]
[tests.ready_lineage."proj.dataset.output_table"]
id = ["proj.dataset.array_table->id"]
item_value = ["proj.dataset.array_table->array_column[]"]

### Test case
[[tests]]
sql = """
INSERT INTO proj.dataset.output_table
WITH struct_to_array AS (
  SELECT 
    id,
    [struct1, struct2] AS combined_structs
  FROM proj.dataset.struct_table
)
SELECT
  s.id,
  item.field1,
  item.field2
FROM 
  struct_to_array s,
  UNNEST(s.combined_structs) AS item
"""
[[tests.schema_objects]]
name = "proj.dataset.struct_table"
kind = "table"
columns = [
    { name = "id", dtype = "INT64" },
    { name = "struct1", dtype = "STRUCT<field1 STRING, field2 INT64>" },
    { name = "struct2", dtype = "STRUCT<field1 STRING, field2 INT64>" }
]
[[tests.schema_objects]]
name = "proj.dataset.output_table"
kind = "table"
columns = [
    { name = "id", dtype = "INT64" },
    { name = "field1", dtype = "STRING" },
    { name = "field2", dtype = "INT64" }
]
[tests.ready_lineage."proj.dataset.output_table"]
id = ["proj.dataset.struct_table->id"]
field1 = ["proj.dataset.struct_table->struct1.field1", "proj.dataset.struct_table->struct2.field1"]
field2 = ["proj.dataset.struct_table->struct1.field2", "proj.dataset.struct_table->struct2.field2"]

### Test case
[[tests]]
sql = """
INSERT INTO proj.dataset.output_table
WITH struct_to_array AS (
  SELECT 
    id,
    [struct1, struct2] AS combined_structs
  FROM `proj.dataset.struct_table`
)
SELECT
  s.id,
  item.field1,
  item.field2
FROM 
  struct_to_array s,
  `s`.`combined_structs` AS item
"""
[[tests.schema_objects]]
name = "proj.dataset.struct_table"
kind = "table"
columns = [
    { name = "id", dtype = "INT64" },
    { name = "struct1", dtype = "STRUCT<field1 STRING, field2 INT64>" },
    { name = "struct2", dtype = "STRUCT<field1 STRING, field2 INT64>" }
]
[[tests.schema_objects]]
name = "proj.dataset.output_table"
kind = "table"
columns = [
    { name = "id", dtype = "INT64" },
    { name = "field1", dtype = "STRING" },
    { name = "field2", dtype = "INT64" }
]
[tests.ready_lineage."proj.dataset.output_table"]
id = ["proj.dataset.struct_table->id"]
field1 = ["proj.dataset.struct_table->struct1.field1", "proj.dataset.struct_table->struct2.field1"]
field2 = ["proj.dataset.struct_table->struct1.field2", "proj.dataset.struct_table->struct2.field2"]

### Test case
[[tests]]
sql = """
INSERT INTO proj.dataset.output_table
SELECT
  id,
  CONCAT(first_name, ' ', last_name) AS full_name,
  CAST(numeric_value AS STRING) AS string_value,
  CONCAT(
    CAST(id AS STRING),
    '_',
    first_name,
    '_',
    CAST(numeric_value AS STRING)
  ) AS composite_key
FROM proj.dataset.input_table
"""
[[tests.schema_objects]]
name = "proj.dataset.input_table"
kind = "table"
columns = [
    { name = "id", dtype = "INT64" },
    { name = "first_name", dtype = "STRING" },
    { name = "last_name", dtype = "STRING" },
    { name = "numeric_value", dtype = "FLOAT64" }
]
[[tests.schema_objects]]
name = "proj.dataset.output_table"
kind = "table"
columns = [
    { name = "id", dtype = "INT64" },
    { name = "full_name", dtype = "STRING" },
    { name = "string_value", dtype = "STRING" },
    { name = "composite_key", dtype = "STRING" }
]
[tests.ready_lineage."proj.dataset.output_table"]
id = ["proj.dataset.input_table->id"]
full_name = ["proj.dataset.input_table->first_name", "proj.dataset.input_table->last_name"]
string_value = ["proj.dataset.input_table->numeric_value"]
composite_key = ["proj.dataset.input_table->id", "proj.dataset.input_table->first_name", "proj.dataset.input_table->numeric_value"]

### Test case
[[tests]]
sql = """
INSERT INTO proj.dataset.analytics_results
SELECT
  category,
  COUNT(DISTINCT user_id) AS unique_users,
  COALESCE(last_value, default_value, 0) AS normalized_value,
  TIMESTAMP_ADD(event_time, INTERVAL duration_minutes MINUTE) AS end_time,
  COALESCE(
    TIMESTAMP_ADD(last_update, INTERVAL 7 DAY),
    TIMESTAMP_ADD(creation_date, INTERVAL 30 DAY)
  ) AS expiration_date
FROM proj.dataset.events
GROUP BY category, last_value, default_value, event_time, duration_minutes, last_update, creation_date
"""
[[tests.schema_objects]]
name = "proj.dataset.events"
kind = "table"
columns = [
    { name = "category", dtype = "STRING" },
    { name = "user_id", dtype = "STRING" },
    { name = "last_value", dtype = "FLOAT64" },
    { name = "default_value", dtype = "FLOAT64" },
    { name = "event_time", dtype = "TIMESTAMP" },
    { name = "duration_minutes", dtype = "INT64" },
    { name = "last_update", dtype = "TIMESTAMP" },
    { name = "creation_date", dtype = "TIMESTAMP" }
]
[[tests.schema_objects]]
name = "proj.dataset.analytics_results"
kind = "table"
columns = [
    { name = "category", dtype = "STRING" },
    { name = "unique_users", dtype = "INT64" },
    { name = "normalized_value", dtype = "FLOAT64" },
    { name = "end_time", dtype = "TIMESTAMP" },
    { name = "expiration_date", dtype = "TIMESTAMP" }
]
[tests.ready_lineage."proj.dataset.analytics_results"]
category = ["proj.dataset.events->category"]
unique_users = ["proj.dataset.events->user_id"]
normalized_value = ["proj.dataset.events->last_value", "proj.dataset.events->default_value"]
end_time = ["proj.dataset.events->event_time", "proj.dataset.events->duration_minutes"]
expiration_date = ["proj.dataset.events->last_update", "proj.dataset.events->creation_date"]

### Test case
[[tests]]
sql = """
INSERT INTO proj.dataset.user_analytics
SELECT
  user_id,
  -- Access nested struct fields from array elements
  ARRAY(
    SELECT AS STRUCT
      event.event_id,
      event.timestamp,
      event.properties.page_name,
      event.properties.session.duration,
      ARRAY(
        SELECT item.product_id
        FROM UNNEST(event.properties.cart.items) AS item
        WHERE item.quantity > 0
      ) AS purchased_products
    FROM UNNEST(user_events) AS event
    WHERE event.properties.is_completed = TRUE
  ) AS completed_events,
  
  -- Create new struct with fields from different nested paths
  STRUCT(
    profile.demographics.age AS user_age,
    profile.demographics.country AS user_country,
    (SELECT COUNT(DISTINCT device.device_id) FROM UNNEST(profile.devices) AS device) AS device_count,
    profile.preferences.theme AS preferred_theme,
    ARRAY(
      SELECT AS STRUCT
        cat.category_name,
        cat.affinity_score
      FROM UNNEST(profile.preferences.category_affinities) AS cat
      WHERE cat.affinity_score > 0.5
      ORDER BY cat.affinity_score DESC
    ) AS high_affinity_categories
  ) AS user_profile_summary,
  
  -- Complex expressions involving nested fields
  (
    SELECT 
      SUM(item.price * item.quantity)
    FROM UNNEST(user_events) AS event, 
    UNNEST(event.properties.cart.items) AS item
    WHERE event.properties.event_type = 'purchase'
  ) AS total_spent,
  
  -- Build struct array derived from multiple sources
  ARRAY(
    SELECT AS STRUCT
      device.device_id,
      device.platform,
      (
        SELECT MAX(event.timestamp)
        FROM UNNEST(user_events) AS event
        WHERE event.device_id = device.device_id
      ) AS last_active_time
    FROM UNNEST(profile.devices) AS device
  ) AS device_activity
  
FROM proj.dataset.user_data
"""
[[tests.schema_objects]]
name = "proj.dataset.user_data"
kind = "table"
columns = [
    { name = "user_id", dtype = "STRING" },
    { name = "profile", dtype = "STRUCT<demographics STRUCT<age INT64, gender STRING, country STRING>, preferences STRUCT<theme STRING, language STRING, category_affinities ARRAY<STRUCT<category_name STRING, affinity_score FLOAT64>>>, devices ARRAY<STRUCT<device_id STRING, platform STRING, model STRING, last_used_date DATE>>>" },
    { name = "user_events", dtype = "ARRAY<STRUCT<event_id STRING, timestamp TIMESTAMP, device_id STRING, properties STRUCT<event_type STRING, page_name STRING, is_completed BOOL, session STRUCT<session_id STRING, duration INT64>, cart STRUCT<cart_id STRING, items ARRAY<STRUCT<product_id STRING, quantity INT64, price FLOAT64>>>>>>" }
]
[[tests.schema_objects]]
name = "proj.dataset.user_analytics"
kind = "table"
columns = [
    { name = "user_id", dtype = "STRING" },
    { name = "completed_events", dtype = "ARRAY<STRUCT<event_id STRING, timestamp TIMESTAMP, page_name STRING, duration INT64, purchased_products ARRAY<STRING>>>" },
    { name = "user_profile_summary", dtype = "STRUCT<user_age INT64, user_country STRING, device_count INT64, preferred_theme STRING, high_affinity_categories ARRAY<STRUCT<category_name STRING, affinity_score FLOAT64>>>" },
    { name = "total_spent", dtype = "FLOAT64" },
    { name = "device_activity", dtype = "ARRAY<STRUCT<device_id STRING, platform STRING, last_active_time TIMESTAMP>>" }
]
[tests.ready_lineage."proj.dataset.user_analytics"]
user_id = ["proj.dataset.user_data->user_id"]
completed_events = [
    "proj.dataset.user_data->user_events[].event_id",
    "proj.dataset.user_data->user_events[].timestamp",
    "proj.dataset.user_data->user_events[].properties.page_name",
    "proj.dataset.user_data->user_events[].properties.session.duration",
    "proj.dataset.user_data->user_events[].properties.cart.items[].product_id",
    # "proj.dataset.user_data->user_events[].properties.is_completed" -- filter lineage
]
user_profile_summary = [
    "proj.dataset.user_data->profile.demographics.age",
    "proj.dataset.user_data->profile.demographics.country",
    "proj.dataset.user_data->profile.devices[].device_id",
    "proj.dataset.user_data->profile.preferences.theme",
    "proj.dataset.user_data->profile.preferences.category_affinities[].category_name",
    "proj.dataset.user_data->profile.preferences.category_affinities[].affinity_score"
]
total_spent = [
    # "proj.dataset.user_data->user_events[].properties.event_type", -- filter lineage
    "proj.dataset.user_data->user_events[].properties.cart.items[].price",
    "proj.dataset.user_data->user_events[].properties.cart.items[].quantity"
]
device_activity = [
    "proj.dataset.user_data->profile.devices[].device_id",
    "proj.dataset.user_data->profile.devices[].platform",
    "proj.dataset.user_data->user_events[].timestamp",
    # "proj.dataset.user_data->user_events[].device_id" -- filter lineage
]

### Test case
[[tests]]
sql = """
insert into `proj.dataset.output_table`
with tmp as (
    select as struct a, b
    from proj.dataset.input_table
)
select
    a,b
from tmp;

insert into `proj.dataset.output_table`
with tmp as (
    select as value struct(c, d)
    from proj.dataset.input_table
)
select
    *
from tmp;
"""
[[tests.schema_objects]]
name = "proj.dataset.input_table"
kind = "table"
columns = [
    { name = "a", dtype = "INT64" },
    { name = "b", dtype = "INT64" },
    { name = "c", dtype = "INT64" },
    { name = "d", dtype = "INT64" }
]
[[tests.schema_objects]]
name = "proj.dataset.output_table"
kind = "table"
columns = [
    { name = "o1", dtype = "INT64" },
    { name = "o2", dtype = "INT64" },
]
[tests.ready_lineage."proj.dataset.output_table"]
o1 = ["proj.dataset.input_table->a","proj.dataset.input_table->c"]
o2 = ["proj.dataset.input_table->b","proj.dataset.input_table->d"]
