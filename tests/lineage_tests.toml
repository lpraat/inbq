### Test case
[[tests]]
sql = """
insert into proj.dat.out_table
select * except (c)
from proj.dat.in_table
"""

[[tests.schema_objects]]
name = "proj.dat.in_table"
kind = "table"
columns = ["a", "b", "c"]

[[tests.schema_objects]]
name = "proj.dat.out_table"
kind = "table"
columns = ["a", "b"]

[tests.ready_lineage."proj.dat.out_table"]
a = ["proj.dat.in_table->a"]
b = ["proj.dat.in_table->b"]


### Test case
[[tests]]
sql = """
insert into proj.dat.out_table
select *
from proj.dat.in_table
"""

[[tests.schema_objects]]
name = "proj.dat.in_table"
kind = "table"
columns = ["a", "b", "c"]

[[tests.schema_objects]]
name = "proj.dat.out_table"
kind = "table"
columns = ["a", "b", "c"]

[tests.ready_lineage."proj.dat.out_table"]
a = ["proj.dat.in_table->a"]
b = ["proj.dat.in_table->b"]
c = ["proj.dat.in_table->c"]

### Test case
[[tests]]
sql = """
insert into `proj.dat.out_table`
with tmp as (
    select * except (c)
    from proj.dat.t1
),

tmp2 as (
    select a, b, `c`
    from proj.dat.t2
)

select
    *
from tmp inner join tmp2 using (a,b)
"""

[[tests.schema_objects]]
name = "proj.dat.t1"
kind = "table"
columns = ["a", "b", "c"]

[[tests.schema_objects]]
name = "proj.dat.t2"
kind = "table"
columns = ["a", "b", "c"]

[[tests.schema_objects]]
name = "proj.dat.out_table"
kind = "table"
columns = ["a", "b", "c"]

[tests.ready_lineage."proj.dat.out_table"]
a = ["proj.dat.t1->a", "proj.dat.t2->a"]
b = ["proj.dat.t1->b", "proj.dat.t2->b"]
c = ["proj.dat.t2->c"]


### Test case
[[tests]]
sql = """
create temp table temp_table as (
    select 
        *
    from proj.dat.t1
);

merge into proj.dat.out_table as t
using (
    select * from temp_table
)
on false
when not matched then
    insert row
when not matched by source then
    delete
"""

[[tests.schema_objects]]
name = "proj.dat.t1"
kind = "table"
columns = ["a", "b", "c"]

[[tests.schema_objects]]
name = "proj.dat.t2"
kind = "table"
columns = ["a", "b", "c"]


[[tests.schema_objects]]
name = "proj.dat.out_table"
kind = "table"
columns = ["a", "b", "c"]

[tests.ready_lineage."proj.dat.out_table"]
a = ["proj.dat.t1->a"]
b = ["proj.dat.t1->b"]
c = ["proj.dat.t1->c"]

### Test case
[[tests]]
sql = """
delete from dataset.Inventory T
where T.product = "foo"
"""

[[tests.schema_objects]]
name = "dataset.Inventory"
kind = "table"
columns = ["product", "quantity", "last_updated"]


[tests.ready_lineage]
# Empty
 
### Test case
[[tests]]
sql = """
truncate table dataset.Inventory;
"""

[[tests.schema_objects]]
name = "dataset.Inventory"
kind = "table"
columns = ["product", "quantity", "last_updated"]

[tests.ready_lineage]
# Empty


### Test case
[[tests]]
sql = """
MERGE dataset.Inventory T
USING dataset.NewArrivals S
ON T.product = S.product
WHEN MATCHED THEN
  UPDATE SET quantity = T.quantity + S.quantity
"""

[[tests.schema_objects]]
name = "dataset.Inventory"
kind = "table"
columns = ["product", "quantity", "last_updated"]

[[tests.schema_objects]]
name = "dataset.NewArrivals"
kind = "table"
columns = ["product", "quantity", "arrival_date"]

[tests.ready_lineage."dataset.Inventory"]
quantity = ["dataset.Inventory->quantity", "dataset.NewArrivals->quantity"]

